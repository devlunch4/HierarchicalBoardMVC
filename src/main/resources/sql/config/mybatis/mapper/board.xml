<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="board">
	<!-- 게시판 조회 -->
	<select id="selectAllBoard" resultType="boardVo">
		SELECT * FROM hboard
		WHERE bcode = originno and groupord = 0 and grouplayer = 0
	</select>

	<!-- 게시판 등록 -->
	<insert id="addBoard" parameterType="boardVo">
		<!-- INSERT INTO hboard ( bcode, originno, groupord, grouplayer, active, 
			title, content, writer, reg_datetime ) VALUES ( seq_hboard.NEXTVAL, seq_hboard.NEXTVAL, 
			0, 0, 0, '1번글', '', '게시판생성자', SYSDATE ); -->
		INSERT INTO hboard (
		bcode,
		originno,
		groupord,
		grouplayer,
		active,
		title,
		content,
		writer,
		reg_datetime
		) VALUES (
		seq_hboard.NEXTVAL,
		seq_hboard.NEXTVAL,
		0,
		0,
		0,
		#{title},
		'',
		#{writer},
		SYSDATE
		)
	</insert>


	<!--게시판 이름, 활성상태 수정 -->
	<update id="updateBoardAct" parameterType="boardVo">
		UPDATE hBoard SET
		title =#{title}, active =#{active} WHERE bcode=#{bcode}
	</update>


	<!-- 선택한 게시판 조회(게시판의 글 가져오기) -->
	<select id="selectOneBoard" resultType="boardVo"
		parameterType="int">
		SELECT *
		FROM
		hboard
		WHERE originno=
		#{value} and groupord
		!= 0 ORDER BY originno, groupord, grouplayer
	</select>

	<!-- 글 등록 -->
	<insert id="boardWrite" parameterType="boardVo">
		INSERT INTO hboard (
		bcode,
		originno,
		groupord,
		grouplayer,
		active,
		title,
		content,
		writer,
		reg_datetime
		) VALUES (
		seq_hboard.NEXTVAL,
		#{originno},
		#{groupord},
		#{grouplayer},
		0,
		#{title},
		#{content},
		#{writer},
		SYSDATE
		)
	</insert>

	<!-- 게시글 하나 조회 -->
	<select id="boardOneRead" resultType="boardVo"
		parameterType="int">
		SELECT * FROM hBoard
		WHERE bcode = #{value}
	</select>

	<!-- -->
	<!-- -->




	<!-- 전체 사용자수 조회 -->
	<select id="selectAllUserCnt" resultType="int">
		SELECT COUNT(*)
		FROM
		users
	</select>


	<!-- 사용자 정보 수정 -->
	<update id="modifyUser" parameterType="userVo">
		UPDATE users SET usernm =
		#{usernm},
		pass = #{pass},
		reg_dt = #{reg_dt},
		alias = #{alias},
		addr1 =
		#{addr1},
		addr2 = #{addr2},
		zipcode = #{zipcode},
		filename =#{filename},
		realfilename= #{realfilename}
		WHERE userid = #{userid}
	</update>


	<!-- 사용자 추가 -->
	<insert id="insertUser" parameterType="userVo">
		INSERT INTO users
		(
		userid,
		usernm, pass, reg_dt, alias, addr1, addr2, zipcode, filename,
		realfilename
		)
		VALUES
		(
		#{userid},
		#{usernm}, #{pass},
		#{reg_dt}, #{alias},
		#{addr1}, #{addr2},
		#{zipcode}, #{filename}, #{realfilename}
		)
	</insert>


	<!-- 사용자 삭제 -->
	<!-- string인 경우 value / result type 없음. 조회가 없기에 -->
	<delete id="deleteUser" parameterType="string">
		DELETE users
		WHERE userid =
		#{value}
	</delete>



	<select id="selectPagingUser" resultType="userVo"
		parameterType="pageVo">
		SELECT *
		FROM
		(SELECT ROWNUM rn , a.*
		FROM
		(SELECT *
		FROM
		users
		ORDER BY userid) a
		WHERE ROWNUM &lt;= #{page} * #{pageSize})
		WHERE
		rn BETWEEN (#{page} - 1) *
		#{pageSize} + 1 AND #{page} * #{pageSize}
	</select>


	<!-- 별명으로 찾기 -->
	<select id="aliasFindUser" parameterType="String"
		resultType="userVo">
		SELECT * FROM users WHERE alias=#{alias}
	</select>
	<select id="aliasFindUserCount" parameterType="String"
		resultType="Integer">
		SELECT COUNT(*) FROM users WHERE alias LIKE #{alias}
	</select>
	<select id="aliasFindUserPaging" parameterType="pageVo"
		resultType="userVo">
		SELECT *
		FROM
		(SELECT ROWNUM rn, a.*
		FROM
		(SELECT *
		FROM users
		WHERE alias LIKE #{serachvalue}
		ORDER BY userid) a
		WHERE ROWNUM &lt;=
		#{page} * #{pageSize})
		WHERE rn BETWEEN (#{page}-1) * #{pageSize} +1
		AND ${page} * #{pageSize}
	</select>


</mapper>

